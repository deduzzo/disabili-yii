<?php

namespace app\helpers;

use yii\db\ActiveRecord;
use yii\base\Behavior;


class DateManagerBehavior extends Behavior
{
    public array $attributes = [];
    public $presentationFormat = 'd/m/Y';
    public $dbFormat = 'Y-m-d';
    public $defaultOnNull;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (!$this->defaultOnNull)
            $this->defaultOnNull = false;
    }


    public function events()
    {
        return [
            ActiveRecord::EVENT_BEFORE_UPDATE => 'beforeCheck',
            ActiveRecord::EVENT_BEFORE_INSERT => 'beforeCheck',
            ActiveRecord::EVENT_BEFORE_DELETE => 'beforeCheck',
            ActiveRecord::EVENT_AFTER_UPDATE => 'afterCheck',
            ActiveRecord::EVENT_AFTER_DELETE => 'afterCheck',
            ActiveRecord::EVENT_AFTER_REFRESH => 'afterCheck',
            ActiveRecord::EVENT_AFTER_INSERT => 'afterCheck',
            ActiveRecord::EVENT_AFTER_FIND => 'afterCheck',

        ];
    }

    public function beforeCheck($event)
    {
        foreach ($this->attributes as $data)
            if (isset($this->owner->$data) && !empty($this->owner->$data) && gettype($this->owner->$data) === 'string')
                $this->owner->$data = ModelViewHelper::formatDate($this->owner->$data, $this->presentationFormat, $this->dbFormat);
    }

    public function afterCheck($event)
    {
        foreach ($this->attributes as $data)
            if (isset($this->owner->$data) && !empty($this->owner->$data) && gettype($this->owner->$data) === 'string')
                $this->owner->$data = ModelViewHelper::formatDate($this->owner->$data, $this->dbFormat, $this->presentationFormat);
    }


}